FROM golang:1.22 AS builder

WORKDIR /go/src/app
COPY inbm/trtl .
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o trtl .

FROM python:3.12-slim

# Add these lines to set up proxy for the build process
ARG HTTP_PROXY
ARG HTTPS_PROXY
ARG NO_PROXY
ENV HTTP_PROXY=$HTTP_PROXY
ENV HTTPS_PROXY=$HTTPS_PROXY
ENV NO_PROXY=$NO_PROXY

# Install build essentials
RUN apt-get update && apt-get install -y \
    build-essential \
    gcc \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy the built trtl binary from the builder stage
COPY --from=builder /go/src/app/trtl /usr/bin/trtl

# Copy the diagnostic-agent directory
COPY inbm/diagnostic-agent /app/diagnostic-agent

# Copy any necessary libraries or common files
COPY inbm-lib /app/inbm-lib

# Copy fpm-template files
COPY inbm/diagnostic-agent/fpm-template /

# Change the debug level from ERROR to DEBUG in the logging.ini file
RUN sed -i 's/level=ERROR/level=DEBUG/g' /etc/intel-manageability/public/diagnostic-agent/logging.ini

# Install dependencies from both sources
RUN pip config set global.proxy ${HTTP_PROXY} && \
    pip install --no-cache-dir -r /app/diagnostic-agent/requirements.txt && \
    pip install --no-cache-dir -e /app/inbm-lib

# Set the Python path to include necessary directories
ENV PYTHONPATH=/app:/app/diagnostic-agent:/app/inbm-lib

# Set MQTT connection details for docker-compose setup
ENV MQTT_HOST=mosquitto
ENV MQTT_PORT=1883
ENV USE_TLS=False

# Change working directory
WORKDIR /app/diagnostic-agent

# Command to run the Diagnostic agent
CMD ["python", "-m", "diagnostic.diagnostic"]
