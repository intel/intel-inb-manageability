syntax = "proto3";

package common.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

message Error {
  string message = 1;
}

// one node could have multiple operations (SOTA, FOTA, etc) each with their own schedules
message NodeScheduledOperations {
  repeated ScheduledOperation scheduled_operations = 1;
  string node_id = 2;
}

// this is one operation with a set of times to run
message ScheduledOperation {
  Operation operation = 1;
  repeated Schedule schedules = 2;
}

message Schedule {
  oneof schedule {
    SingleSchedule single_schedule = 1;
    RepeatedSchedule repeated_schedule = 2;
  }
}

// this is different from MM's SingleSchedule in that it is using google's Timestamp
message SingleSchedule {
  // This will be created by MJunct.  This will be empty coming into MJunct NB API.  Else, it should have a string value.
  string job_id = 1;
  // to specify running immeidate, omit start time and end time
  google.protobuf.Timestamp start_time = 2;
  google.protobuf.Timestamp end_time = 3;
}

// this is different from MM's SingleSchedule in that it is using google's Duration
message RepeatedSchedule {
  // This will be created by MJunct.  This will be empty coming into MJunct NB API.  Else, it should have a string value.
  string job_id = 1;
  google.protobuf.Duration duration = 2;  // should be between 1 second and 86400 seconds (24 hours worth of seconds)
  string cron_minutes = 3;  // cron style minutes (0-59)
  string cron_hours = 4; // cron style hours (0-23)
  string cron_day_month = 5;  // cron style day of month (0-31)
  string cron_month = 6;  // cron style month (1-12)
  string cron_day_week = 7;  // cron style day of week (0-6)
}

message Operation {
  repeated PreOperation pre_operations = 1;
  repeated PostOperation post_operations = 2;
  enum ServiceType {
    SERVICE_TYPE_UNSPECIFIED = 0;
    SERVICE_TYPE_INBS = 1;
    SERVICE_TYPE_OOB_AMT = 2;
    SERVICE_TYPE_OOB_BMC = 3;
    SERVICE_TYPE_AUTO = 4;
  }
  ServiceType service_type = 3;  
  oneof operation {
    UpdateSystemSoftwareOperation update_system_software_operation = 4;
    SetPowerStateOperation set_power_state_operation = 5;
    // and others
  }
}

message UpdateSystemSoftwareOperation {
    string url = 1; // URL from which to remotely retrieve the package
    google.protobuf.Timestamp release_date = 2; // Release date of the new SW update.
    enum DownloadMode {
        DOWNLOAD_MODE_UNSPECIFIED = 0;
        DOWNLOAD_MODE_FULL = 1; // Both download the package and install the package
        DOWNLOAD_MODE_NO_DOWNLOAD = 2; // Do not download the package.  Only install.
        DOWNLOAD_MODE_DOWNLOAD_ONLY = 3; // Only download the package.  Do not install.
    }
    DownloadMode mode = 3; // Mode for installing the softare update regarding download and install steps.
    bool do_not_reboot = 4;  // Whether to reboot the node after the firmware update attempt
    repeated string package_list = 5; // List of packages to install if whole package update isn't desired.
}

message SetPowerStateOperation {
    enum PowerState {
        POWER_STATE_UNSPECIFIED = 0;
        POWER_STATE_ON = 2;
        POWER_STATE_CYCLE = 5;
        POWER_STATE_OFF = 8;
        POWER_STATE_RESET = 10;
    }
    PowerState opcode = 1;
}

message PreOperation {
//  oneof pre_operation {
//    // ...
//  }
}

message PostOperation {
//  oneof post_operation {
//    // ...
//  }
}

// this is used for nodes to send updates on job progress
message NodeJobStatusUpdate {
  string job_id = 1;
  // other fields here
}