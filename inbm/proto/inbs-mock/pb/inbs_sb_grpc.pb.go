// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: inbs/v1/inbs_sb.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	INBSSBService_HandleINBMCommand_FullMethodName = "/inbs.v1.INBSSBService/HandleINBMCommand"
	INBSSBService_SendNodeUpdate_FullMethodName    = "/inbs.v1.INBSSBService/SendNodeUpdate"
)

// INBSSBServiceClient is the client API for INBSSBService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type INBSSBServiceClient interface {
	// Bi-directional streaming method
	HandleINBMCommand(ctx context.Context, opts ...grpc.CallOption) (INBSSBService_HandleINBMCommandClient, error)
	// Used to send any kind of node status update
	SendNodeUpdate(ctx context.Context, in *SendNodeUpdateRequest, opts ...grpc.CallOption) (*SendNodeUpdateResponse, error)
}

type iNBSSBServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewINBSSBServiceClient(cc grpc.ClientConnInterface) INBSSBServiceClient {
	return &iNBSSBServiceClient{cc}
}

func (c *iNBSSBServiceClient) HandleINBMCommand(ctx context.Context, opts ...grpc.CallOption) (INBSSBService_HandleINBMCommandClient, error) {
	stream, err := c.cc.NewStream(ctx, &INBSSBService_ServiceDesc.Streams[0], INBSSBService_HandleINBMCommand_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &iNBSSBServiceHandleINBMCommandClient{stream}
	return x, nil
}

type INBSSBService_HandleINBMCommandClient interface {
	Send(*HandleINBMCommandResponse) error
	Recv() (*HandleINBMCommandRequest, error)
	grpc.ClientStream
}

type iNBSSBServiceHandleINBMCommandClient struct {
	grpc.ClientStream
}

func (x *iNBSSBServiceHandleINBMCommandClient) Send(m *HandleINBMCommandResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *iNBSSBServiceHandleINBMCommandClient) Recv() (*HandleINBMCommandRequest, error) {
	m := new(HandleINBMCommandRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *iNBSSBServiceClient) SendNodeUpdate(ctx context.Context, in *SendNodeUpdateRequest, opts ...grpc.CallOption) (*SendNodeUpdateResponse, error) {
	out := new(SendNodeUpdateResponse)
	err := c.cc.Invoke(ctx, INBSSBService_SendNodeUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// INBSSBServiceServer is the server API for INBSSBService service.
// All implementations must embed UnimplementedINBSSBServiceServer
// for forward compatibility
type INBSSBServiceServer interface {
	// Bi-directional streaming method
	HandleINBMCommand(INBSSBService_HandleINBMCommandServer) error
	// Used to send any kind of node status update
	SendNodeUpdate(context.Context, *SendNodeUpdateRequest) (*SendNodeUpdateResponse, error)
	mustEmbedUnimplementedINBSSBServiceServer()
}

// UnimplementedINBSSBServiceServer must be embedded to have forward compatible implementations.
type UnimplementedINBSSBServiceServer struct {
}

func (UnimplementedINBSSBServiceServer) HandleINBMCommand(INBSSBService_HandleINBMCommandServer) error {
	return status.Errorf(codes.Unimplemented, "method HandleINBMCommand not implemented")
}
func (UnimplementedINBSSBServiceServer) SendNodeUpdate(context.Context, *SendNodeUpdateRequest) (*SendNodeUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNodeUpdate not implemented")
}
func (UnimplementedINBSSBServiceServer) mustEmbedUnimplementedINBSSBServiceServer() {}

// UnsafeINBSSBServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to INBSSBServiceServer will
// result in compilation errors.
type UnsafeINBSSBServiceServer interface {
	mustEmbedUnimplementedINBSSBServiceServer()
}

func RegisterINBSSBServiceServer(s grpc.ServiceRegistrar, srv INBSSBServiceServer) {
	s.RegisterService(&INBSSBService_ServiceDesc, srv)
}

func _INBSSBService_HandleINBMCommand_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(INBSSBServiceServer).HandleINBMCommand(&iNBSSBServiceHandleINBMCommandServer{stream})
}

type INBSSBService_HandleINBMCommandServer interface {
	Send(*HandleINBMCommandRequest) error
	Recv() (*HandleINBMCommandResponse, error)
	grpc.ServerStream
}

type iNBSSBServiceHandleINBMCommandServer struct {
	grpc.ServerStream
}

func (x *iNBSSBServiceHandleINBMCommandServer) Send(m *HandleINBMCommandRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *iNBSSBServiceHandleINBMCommandServer) Recv() (*HandleINBMCommandResponse, error) {
	m := new(HandleINBMCommandResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _INBSSBService_SendNodeUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendNodeUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(INBSSBServiceServer).SendNodeUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: INBSSBService_SendNodeUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(INBSSBServiceServer).SendNodeUpdate(ctx, req.(*SendNodeUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// INBSSBService_ServiceDesc is the grpc.ServiceDesc for INBSSBService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var INBSSBService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inbs.v1.INBSSBService",
	HandlerType: (*INBSSBServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendNodeUpdate",
			Handler:    _INBSSBService_SendNodeUpdate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HandleINBMCommand",
			Handler:       _INBSSBService_HandleINBMCommand_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "inbs/v1/inbs_sb.proto",
}
