// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: inbs_sb.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	INBSService_Ping_FullMethodName = "/inbs.INBSService/Ping"
)

// INBSServiceClient is the client API for INBSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type INBSServiceClient interface {
	// Bi-directional streaming method
	Ping(ctx context.Context, opts ...grpc.CallOption) (INBSService_PingClient, error)
}

type iNBSServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewINBSServiceClient(cc grpc.ClientConnInterface) INBSServiceClient {
	return &iNBSServiceClient{cc}
}

func (c *iNBSServiceClient) Ping(ctx context.Context, opts ...grpc.CallOption) (INBSService_PingClient, error) {
	stream, err := c.cc.NewStream(ctx, &INBSService_ServiceDesc.Streams[0], INBSService_Ping_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &iNBSServicePingClient{stream}
	return x, nil
}

type INBSService_PingClient interface {
	Send(*PingResponse) error
	Recv() (*PingRequest, error)
	grpc.ClientStream
}

type iNBSServicePingClient struct {
	grpc.ClientStream
}

func (x *iNBSServicePingClient) Send(m *PingResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *iNBSServicePingClient) Recv() (*PingRequest, error) {
	m := new(PingRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// INBSServiceServer is the server API for INBSService service.
// All implementations must embed UnimplementedINBSServiceServer
// for forward compatibility
type INBSServiceServer interface {
	// Bi-directional streaming method
	Ping(INBSService_PingServer) error
	mustEmbedUnimplementedINBSServiceServer()
}

// UnimplementedINBSServiceServer must be embedded to have forward compatible implementations.
type UnimplementedINBSServiceServer struct {
}

func (UnimplementedINBSServiceServer) Ping(INBSService_PingServer) error {
	return status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedINBSServiceServer) mustEmbedUnimplementedINBSServiceServer() {}

// UnsafeINBSServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to INBSServiceServer will
// result in compilation errors.
type UnsafeINBSServiceServer interface {
	mustEmbedUnimplementedINBSServiceServer()
}

func RegisterINBSServiceServer(s grpc.ServiceRegistrar, srv INBSServiceServer) {
	s.RegisterService(&INBSService_ServiceDesc, srv)
}

func _INBSService_Ping_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(INBSServiceServer).Ping(&iNBSServicePingServer{stream})
}

type INBSService_PingServer interface {
	Send(*PingRequest) error
	Recv() (*PingResponse, error)
	grpc.ServerStream
}

type iNBSServicePingServer struct {
	grpc.ServerStream
}

func (x *iNBSServicePingServer) Send(m *PingRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *iNBSServicePingServer) Recv() (*PingResponse, error) {
	m := new(PingResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// INBSService_ServiceDesc is the grpc.ServiceDesc for INBSService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var INBSService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inbs.INBSService",
	HandlerType: (*INBSServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Ping",
			Handler:       _INBSService_Ping_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "inbs_sb.proto",
}
