syntax = "proto3";

package inbs.v1;
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";


// TODO: get this validate.proto import working. Maybe use the 'buf' tool as maintenance manager does?
// import "validate/validate.proto";

service INBSSBService {
  // Bi-directional streaming method
  rpc HandleINBMCommand(stream HandleINBMCommandResponse) returns (stream HandleINBMCommandRequest);
}

message HandleINBMCommandRequest {
  string request_id = 1;
  oneof request {
    UpdateScheduledTasks update_scheduled_tasks = 2;
    Operation operation = 3;
    // ...
  }
}

message HandleINBMCommandResponse {
  string request_id = 1;
}

message UpdateScheduledTasks {
  repeated ScheduledTask tasks = 1;
}

message ScheduledTask {
  Operation operation = 1;
  repeated Schedule schedules = 2;
}

message Operation {
  repeated PreOperation pre_operations = 1;
  repeated PostOperation post_operations = 2;
  oneof operation_type {
    UpdateSystemSoftwareRequest update_system_software_request = 3;
    NullOperation null_operation = 4; // useful for testing or for ping
    // ...
  }
}

message NullOperation {

}

message PreOperation {
//  oneof type {
//  // ...
//  }
}

message PostOperation {
//  oneof type {
//  // ...
// }
}

message UpdateSystemSoftwareRequest {
    Url url = 1; // URL from which to remotely retrieve the package
    google.protobuf.Timestamp release_date = 2; // Release date of the new SW update.
    DownloadMode mode = 3; // Mode for installing the softare update regarding download and install steps.
    bool do_not_reboot = 4;  // Whether to reboot the node after the firmware update attempt
    repeated string package_list = 5; // List of packages to install if whole package update isn't desired.
}

// Defines the URL structure
message Url {
    enum Scheme {
        SCHEME_UNSPECIFIED = 0; // Default value.  This will produce an error
        SCHEME_HTTPS = 1; // HyperText Transfer Protocol Secure
        SCHEME_FTP = 2; // File transfer protocol
        SCHEME_FILE = 3; // Host-Specific File Names
    }

    Scheme scheme = 1; // URL Scheme such as https://
    string address = 2; // Contains domain, path, port, query, and fragment of the address
    string username = 3; // Username if required to retrieve the file
}

// Specifies the mode for installing the Software update.  This allows for the steps of downloading
// and installing to be seperated into two different actions.
message DownloadMode {
    enum Mode {
        MODE_UNSPECIFIED = 0;
        MODE_FULL = 1; // Both download the package and install the package
        MODE_NO_DOWNLOAD = 2; // Do not download the package.  Only install.
        MODE_DOWNLOAD_ONLY = 3; // Only download the package.  Do not install.
    }

    Mode mode = 1; // Mode for installing the Software update.
}

message Schedule {
  oneof schedule {
    SingleSchedule single_schedule = 1;
    RepeatedSchedule repeated_schedule = 2;
  }
}

message SingleSchedule {
  google.protobuf.Timestamp start_time = 1;
  google.protobuf.Timestamp end_time = 2;
}

message RepeatedSchedule {
  google.protobuf.Duration duration = 1;  // should be between 1 second and 86400 seconds (24 hours worth of seconds)
  string cron_minutes = 2;  // cron style minutes (0-59)
  string cron_hours = 3; // cron style hours (0-23)
  string cron_day_month = 4;  // cron style day of month (0-31)
  string cron_month = 5;  // cron style month (1-12)
  string cron_day_week = 6;  // cron style day of week (0-6)
}
