{
  "widgetsBundle": {
    "alias": "intel_manageability",
    "title": "Intel Manageability Widgets",
    "image": null
  },
  "widgetTypes": [
    {
      "alias": "device_list",
      "name": "Device List",
      "descriptor": {
        "type": "latest",
        "sizeX": 6.5,
        "sizeY": 4.5,
        "resources": [],
        "templateHtml": "<!--\nDevice List widget HTML\n\nCopyright (C) 2017-2022 Intel Corporation\nSPDX-License-Identifier: Apache-2.0\n-->\n\n<!DOCTYPE HTML>\n\n<div id=\"info-panel\" style=\"height: 100%;\">\n    <div class=\"header-box\">\n        <div class=\"header\">Intel Manageability Devices</div>\n        <div class=\"search-box\">\n            <md-input-container md-no-float class=\"search\">\n                  <md-icon md-font-library=\"material-icons\">\n                      search\n                  </md-icon>\n                  <input ng-model=\"search.name\"\n                         type=\"text\"\n                         placeholder=\"Search\">\n            </md-input-container>\n            <md-menu class=\"search-options\">\n                <md-button class=\"md-icon-button\" ng-click=\"$mdMenu.open($event)\">\n                    <md-icon md-menu-origin md-font-library=\"material-icons\">\n                        more_vert\n                    </md-icon>\n                </md-button>\n                <md-menu-content width=\"2\">\n                    <md-menu-item>\n                        <md-button ng-click=\"batchSelect(true)\">\n                            Select All\n                        </md-button>\n                    </md-menu-item>\n                    <md-menu-item>\n                        <md-button ng-click=\"batchSelect(false)\">\n                            Select None\n                        </md-button>\n                    </md-menu-item>\n                </md-menu-content>\n            </md-menu>\n        </div>\n    </div>\n    <div class=\"devices\">\n        <div class=\"device\" ng-repeat=\"d in devices | filter: search\">\n            <md-checkbox ng-model=\"d.selected\">{{d.name}}</md-checkbox>\n        </div>\n    </div>\n</div>",
        "templateCss": "/*\nDevice List widget CSS\n\nCopyright (C) 2017-2022 Intel Corporation\nSPDX-License-Identifier: Apache-2.0\n*/\n\n\n#info-panel {\n    overflow: auto;\n    margin: 0;\n}\n\n.header-box {\n    top: 0;\n    z-index: 10;\n    box-sizing: border-box;\n\n    position: -webkit-sticky;\n    position: sticky;\n    padding: 1.5rem 1.5rem 0.5rem 1.5rem;\n    background-color: #fff;\n    margin-bottom: 1.5rem;\n    \n    box-shadow: 0 2px 3px 0 rgba(0, 0, 0, 0.2);\n}\n\n.header {\n    font-size: 1.25rem;\n    font-weight: 500;\n}\n\n.md-errors-spacer {\n    display: none;\n}\n\n.search-box {\n    display: flex;\n    flex-flow: row nowrap;\n    align-items: center;\n}\n\n.search {\n    flex-basis: 1;\n    flex-grow: 1;\n}\n\n.device {\n    margin: 0 1.5rem 0.5rem 1.5rem;\n    display: flex;\n    flex-flow: column nowrap;\n}",
        "controllerScript": "/*\nDevice List widget AngularJS controller code\n\nCopyright (C) 2017-2022 Intel Corporation\nSPDX-License-Identifier: Apache-2.0\n*/\n\nself.onInit = function() {\n    const scope = self.ctx.$scope;\n        scope.online = false;\n\n    // Initialize the devices object\n    scope.devices = [];\n    self.ctx.datasources.forEach(source => {\n        // Create the devices\n        device = {\n            selected: true,\n            name: source.name,\n            id: source.entityId\n        };\n        scope.devices.push(device);\n    });\n    scope.devices.sort((a, b) => {\n        // Sort the devices by name alphabetically\n        const an = a.name;\n        const bn = b.name;\n        return an < bn ? -1 : an > bn ? 1 : 0;\n    });\n    \n    // Initialize the search object\n    scope.search = {\n        name: \"\"\n    };\n    \n    // Batch alter the select state\n    scope.batchSelect = state => {\n        for (let name in scope.devices) {\n            const device = scope.devices[name];\n            device.selected = state;\n        }\n    };\n    \n    // Broadcast an event with the selected events\n    scope.selected = () => {\n        const selectedIds = [];\n        scope.devices.forEach(device => {\n            if (device.selected) {\n                selectedIds.push({\n                    id: device.id,\n                    name: device.name\n                });   \n            }\n        });\n        const deviceSelected = new CustomEvent(\n            'deviceSelected',\n            {detail: selectedIds}\n        );\n        document.dispatchEvent(deviceSelected);\n    };\n    \n    // Broadcast event on updates\n    scope.$watch('devices', scope.selected, true);\n};\n\nself.onDataUpdated = function() {\n    const scope = self.ctx.$scope;\n    scope.selected();\n};\n\nself.onResize = function() {};\n\nself.onDestroy = function() {};\n",
        "settingsSchema": "{}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"My Device\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Happiness\",\"color\":\"#ff9800\",\"settings\":{},\"_hash\":0.26790778871949805,\"funcBody\":\"return Math.round(1000*Math.cos(time/5000));\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Temperature\",\"color\":\"rgb(33, 150, 243)\",\"settings\":{},\"_hash\":0.682878536509057,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":false,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"0\",\"settings\":{},\"title\":\"Device List\",\"dropShadow\":true,\"enableFullscreen\":false,\"widgetStyle\":{},\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"useDashboardTimewindow\":true,\"displayTimewindow\":true,\"showLegend\":false,\"actions\":{}}"
      }
    },
    {
      "alias": "docker_stats_widget",
      "name": "Docker Stats Widget",
      "descriptor": {
        "type": "latest",
        "sizeX": 8,
        "sizeY": 5,
        "resources": [],
        "templateHtml": "<!--\nDocker Container Stats widget HTML\n\nCopyright (C) 2017-2022 Intel Corporation\nSPDX-License-Identifier: Apache-2.0\n-->\n\n<!--\nDevice List widget HTML\n\nCopyright (C) 2017-2022 Intel Corporation\nSPDX-License-Identifier: Apache-2.0\n-->\n\n<!DOCTYPE HTML>\n\n<div id=\"info-panel\" style=\"height: 100%;\">\n    <div class=\"device\">\n        <div class=\"header-box\">\n            <div class=\"header-title\">\n                <md-button class=\"md-icon-button\"\n                    ng-click=\"search()\">\n                    <md-icon\n                        md-font-library=\"material-icons\">\n                        {{searching ? \"close\" : \"search\"}}\n                    </md-icon>\n                </md-button>\n                <div class=\"search-box\" ng-show=\"searching\">\n                    <md-input-container md-no-float\n                        class=\"search\"\n                        style=\"margin: 0\">\n                          <input id=\"dcs-search-box\"\n                                 ng-model=\"filter.name\"\n                                 type=\"text\"\n                                 placeholder=\"Search\">\n                    </md-input-container>\n                </div>\n                <span class=\"header-label\" ng-hide=\"searching\">\n                    Docker Container Stats\n                </span>\n            </div>\n            <div class=\"header-info\">\n                <md-button class=\"md-icon-button\"\n                    ng-click=\"refresh()\"\n                    ng-disabled=\"waiting\">\n                    <md-icon \n                        ng-hide=\"waiting\"\n                        md-font-library=\"material-icons\">\n                        refresh\n                    </md-icon>\n                    <md-progress-circular\n                        ng-show=\"waiting\"\n                        md-diameter=\"24px\">\n                    </md-progress-circular>\n                </md-button>\n                Last updated: {{lastUpdated}}\n            </div>\n        </div>\n        <div class=\"no-data\" ng-hide=\"containers.length\">NO DATA</div>\n        <div class=\"container\" \n                ng-class=\"{ 'container-active': c.sum }\"\n                ng-repeat=\"c in containers | filter: filter\">\n            <div class=\"container-name\">\n                {{c.name}}\n            </div>\n            <div class=\"container-stats\">\n                <div class=\"stat\" ng-repeat=\"(k, v) in c.stats\">\n                    {{k}}: {{v}}\n                </div>\n            </div>\n        </div>\n    </div>\n</div>",
        "templateCss": "/*\nDocker Container Stats widget CSS\n\nCopyright (C) 2017-2022 Intel Corporation\nSPDX-License-Identifier: Apache-2.0\n*/\n\n#info-panel {\n    overflow: auto;\n    margin: 0;\n}\n\n.device {\n    margin: 0;\n    display: flex;\n    flex-flow: column nowrap;\n}\n\n.header-box {\n    top: 0;\n    z-index: 10;\n    box-sizing: border-box;\n\n    position: -webkit-sticky;\n    position: sticky;\n    padding: 1rem;\n    background-color: #fff;\n    margin-bottom: 1.5rem;\n    \n    box-shadow: 0 2px 3px 0 rgba(0, 0, 0, 0.2);\n}\n\n.header-title {\n    display: flex;\n    flex-flow: row wrap;\n    align-items: center;\n    font-size: 1.05rem;\n    margin-bottom: 0.5rem;\n}\n\n.header-info {\n    font-size: 0.9rem;\n    color: #777;\n}\n\n.md-errors-spacer {\n    display: none;\n}\n\n.search-box {\n    display: inline-block;\n    flex-flow: row nowrap;\n    align-items: center;\n    margin: 0;\n}\n\n.search {\n    flex-basis: 1;\n    flex-grow: 1;\n}\n\nmd-progress-circular svg path {\n    stroke: #777;\n}\n\n.no-data {\n    margin: 0 auto;\n}\n\n.container {\n    opacity: 0.5;\n    box-sizing: border-box;\n    width: 100%;\n    margin-bottom: 1rem;\n    padding: 0rem 1rem;\n    font-size: 0.9rem;\n}\n\n.container-name {\n    margin-right: 0.5rem;\n    word-wrap: break-word;\n    font-weight: bold;\n}\n\n.container-stats {\n    display: flex;\n    flex-flow: row wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    color: #666;\n}\n\n.container-active {\n    opacity: 1;\n}\n\n.stat {\n    margin-bottom: 0.25rem;\n}",
        "controllerScript": "/*\nDocker Container Stats widget AngularJS controller code\n\nCopyright (C) 2017-2022 Intel Corporation\nSPDX-License-Identifier: Apache-2.0\n*/\n\nself.onInit = function() {\n\n    const scope = self.ctx.$scope;\n    \n    scope.containers = [];\n    \n    // Toggle search mode\n    scope.filter = { name: \"\" };\n    scope.searching = false;\n    scope.search = () => {\n        scope.searching = !scope.searching;\n        if (scope.searching) {\n            setTimeout(() => \n                document.getElementById(\"dcs-search-box\").focus());\n        } else {\n            scope.filter.name = \"\";\n        }\n    };\n    \n    // Show waiting animation while command is being sent\n    scope.waiting = false;\n    document.addEventListener('rpcAck', rpcAck => {\n        console.log(rpcAck.detail === false);\n        if (rpcAck.detail === false) {\n            scope.waiting = false;\n        }\n    });\n\n    // Send an RPC request to refresh the stats\n    scope.refresh = () => {\n        const rpcRequest = new CustomEvent(\n            'rpcRequest', {\n                detail: {\n                    command: \"triggeraota\",\n                    payload: {\n                        app: \"docker\",\n                        cmd: \"stats\"\n                    }\n                }\n            }\n        );\n        scope.waiting = true;\n        document.dispatchEvent(rpcRequest);\n        \n        // Timeout the waiting animation\n        setTimeout(\n            () => scope.waiting = false,\n            self.ctx.settings.refreshTimeout\n        );\n    };\n};\n\nself.onDataUpdated = function() {\n\n    const scope = self.ctx.$scope;\n    const isNumber = n => !isNaN(parseFloat(n)) && isFinite(n);\n    \n    let maxTS = 0;\n    \n    self.ctx.data.forEach(data => {\n        // Timestamp is left, prop is right\n        if (data.data.length === 0) return;\n        let ts = data.data[0][0];\n        let value = data.data[0][1];\n        \n        // Try to parse container stats\n        let containers_data = null;\n        try {\n            containers_data = JSON.parse(value);\n        } catch (e) {\n            return;\n        } finally {\n            if (containers_data === null\n                || !containers_data.hasOwnProperty(\"containers\")) {\n                    return;\n                }\n        }\n        \n        // Create container objects\n        const containers = [];\n        containers_data.containers.forEach(c => {\n            container = {\n                name: c.name,\n                stats: {},\n                sum: 0\n            };\n            for (const key in c) {\n                if (key != \"name\") {\n                    const val = c[key];\n                    container.stats[key] = val;\n                    if (! isNaN(val)) container.sum += val;\n                }\n            }\n            containers.push(container);\n        });\n        \n        containers.sort((a, b) => {\n            // Non-zero containers come first\n            // Logical XOR on a.sum and b.sum\n            if (a.sum ? !b.sum : b.sum) {\n                return a.sum > b.sum ? -1 : 1;\n            }\n\n            // Alphabetical sort\n            an = a.name;\n            bn = b.name;\n            return an < bn ? -1 : an > bn ? 1 : 0;\n        });\n\n        // Update containers\n        scope.containers = containers;\n\n        if (ts > maxTS) {\n            maxTS = ts;\n        }\n    });\n    \n    if (maxTS > 0) {\n        const lastUpdatedTS = new Date(0);\n        lastUpdatedTS.setUTCMilliseconds(maxTS);\n        scope.lastUpdated = lastUpdatedTS.toLocaleString();\n        setTimeout(() => scope.waiting = false, 10);\n    }\n};\n\nself.onResize = function() {};\n\nself.onDestroy = function() {};\n",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"properties\": {\n            \"refreshTimeout\": {\n                \"title\": \"Refresh Timeout\",\n                \"type\": \"number\",\n                \"default\": 8000\n            }\n        }\n    }\n}",
        "dataKeySettingsSchema": "{}",
        "defaultConfig": "{\"showTitle\":false,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"0px\",\"settings\":{},\"title\":\"Docker Stats Widget\",\"dropShadow\":true,\"enableFullscreen\":true,\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"mobileHeight\":null,\"showTitleIcon\":false,\"titleIcon\":\"more_horiz\",\"iconColor\":\"rgba(0, 0, 0, 0.87)\",\"iconSize\":\"24px\",\"titleTooltip\":\"\",\"widgetStyle\":{},\"useDashboardTimewindow\":true,\"displayTimewindow\":true,\"showLegend\":false,\"actions\":{},\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Sin\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.7570621101814305,\"funcBody\":\"return Math.round(1000*Math.sin(time/5000));\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}}}"
      }
    },
    {
      "alias": "timeseries_table",
      "name": "Event Log",
      "descriptor": {
        "type": "timeseries",
        "sizeX": 8,
        "sizeY": 6.5,
        "resources": [],
        "templateHtml": "<tb-timeseries-table-widget \n    table-id=\"tableId\"\n    ctx=\"ctx\">\n</tb-timeseries-table-widget>",
        "templateCss": "",
        "controllerScript": "// This is a customized version of the built in Time Series Table\n// It will broadcast a deviceActive event when new data comes in\n\nself.onInit = function() {\n    const scope = self.ctx.$scope;\n    const id = self.ctx.$scope.$injector.get('utils').guid();\n    scope.tableId = \"table-\" + id;\n    scope.ctx = self.ctx;\n    \n    scope.deviceActive = new Event(\"deviceActive\");\n    scope.dataSigs = [];\n};\n\nself.onDataUpdated = function() {\n    const scope = self.ctx.$scope;\n\n    // Update the table\n    scope.$broadcast(\n        'timeseries-table-data-updated', scope\n        .tableId);\n\n    // Function to recapture the data signature\n    const captureSigs = sources => {\n        scope.dataSigs = [];\n        const dataSigs = [];\n        for (const s of sources) {\n            if (s.data.length === 0) return;\n            dataSig = {\n                length: s.data.length,\n                head: s.data[0],\n                tail: s.data[s.data.length - 1]\n            };\n            dataSigs.push(dataSig);\n        }\n        scope.dataSigs = dataSigs;\n    };\n\n    // Check the current data against the data signature\n    sources = self.ctx.defaultSubscription.data;\n    if (scope.dataSigs.length === 0) {\n        captureSigs(sources);\n    } else {\n        changed = false;\n        for (let i = 0; i < scope.dataSigs.length; ++\n            i) {\n            sig = scope.dataSigs[i];\n            data = sources[i].data;\n            if (data.length != sig.length ||\n                data[0][0] != sig.head[0] ||\n                data[data.length - 1][0] != sig.tail[0]\n            ) {\n                changed = true;\n                break;\n            }\n        }\n        if (changed) {\n            scope.dataSigs = [];\n            captureSigs(sources);\n            document.dispatchEvent(scope.deviceActive);\n        }\n    }\n};\n\nself.actionSources = function() {\n    return {\n        'actionCellButton': {\n            name: 'widget-action.action-cell-button',\n            multiple: true\n        },\n        'rowClick': {\n            name: 'widget-action.row-click',\n            multiple: false\n        }\n    };\n};",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"TimeseriesTableSettings\",\n        \"properties\": {\n            \"showTimestamp\": {\n                \"title\": \"Display timestamp column\",\n                \"type\": \"boolean\",\n                \"default\": true\n            },\n            \"displayPagination\": {\n                \"title\": \"Display pagination\",\n                \"type\": \"boolean\",\n                \"default\": true\n            },            \n            \"defaultPageSize\": {\n                \"title\": \"Default page size\",\n                \"type\": \"number\",\n                \"default\": 10\n            },\n            \"hideEmptyLines\": {\n                \"title\": \"Hide empty lines\",\n                \"type\": \"boolean\",\n                \"default\": false\n            }\n        },\n        \"required\": []\n    },\n    \"form\": [\n        \"showTimestamp\",\n        \"displayPagination\",\n        \"defaultPageSize\",\n        \"hideEmptyLines\"\n    ]\n}",
        "dataKeySettingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"DataKeySettings\",\n        \"properties\": {\n            \"useCellStyleFunction\": {\n                \"title\": \"Use cell style function\",\n                \"type\": \"boolean\",\n                \"default\": false\n            },\n            \"cellStyleFunction\": {\n                \"title\": \"Cell style function: f(value)\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"useCellContentFunction\": {\n                \"title\": \"Use cell content function\",\n                \"type\": \"boolean\",\n                \"default\": false\n            },\n            \"cellContentFunction\": {\n                \"title\": \"Cell content function: f(value, rowData, filter)\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            }\n        },\n        \"required\": []\n    },\n    \"form\": [\n        \"useCellStyleFunction\",\n        {\n            \"key\": \"cellStyleFunction\",\n            \"type\": \"javascript\"\n        },\n        \"useCellContentFunction\",\n        {\n            \"key\": \"cellContentFunction\",\n            \"type\": \"javascript\"\n        }\n    ]\n}",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"Message\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Sample Events\",\"color\":\"#2196f3\",\"settings\":{\"useCellStyleFunction\":false,\"useCellContentFunction\":false},\"_hash\":0.12272766540499025,\"funcBody\":\"return `Event #${Math.round(1000*Math.sin(time/5000))}`;\"}]}],\"timewindow\":{\"realtime\":{\"interval\":1000,\"timewindowMs\":2592000000},\"aggregation\":{\"type\":\"NONE\",\"limit\":200}},\"showTitle\":true,\"backgroundColor\":\"rgb(255, 255, 255)\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"showTimestamp\":true,\"displayPagination\":true,\"defaultPageSize\":10},\"title\":\"Event Log\",\"dropShadow\":true,\"enableFullscreen\":true,\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"useDashboardTimewindow\":false,\"showLegend\":false,\"widgetStyle\":{},\"actions\":{},\"displayTimewindow\":true}"
      }
    },
    {
      "alias": "basic_timeseries",
      "name": "Dynamic Telemetry",
      "descriptor": {
        "type": "timeseries",
        "sizeX": 8,
        "sizeY": 5,
        "resources": [],
        "templateHtml": "",
        "templateCss": ".legend {\n    font-size: 13px;\n    line-height: 10px;\n}\n\n.legend table { \n    border-spacing: 0px;\n    border-collapse: separate;\n}\n\n.mouse-events .flot-overlay {\n    cursor: crosshair; \n}\n\n",
        "controllerScript": "// This is a customized version of the built in Time Series Flot\n// It will broadcast a deviceActive event when new data comes in\n\nself.onInit = function() {\n    const scope = self.ctx.$scope;\n    self.ctx.flot = new TbFlot(self.ctx);\n    scope.deviceActive = new Event(\"deviceActive\");\n    scope.dataSigs = [];\n};\n\nself.onDataUpdated = function() {\n    const scope = self.ctx.$scope;\n    \n    // Update the charts\n    self.ctx.flot.update();\n\n    // Function to recapture the data signature\n    const captureSigs = sources => {\n        scope.dataSigs = [];\n        const dataSigs = [];\n        for (const s of sources) {\n            if (s.data.length === 0) return;\n            dataSig = {\n                length: s.data.length,\n                head: s.data[0],\n                tail: s.data[s.data.length - 1]\n            };\n            dataSigs.push(dataSig);\n        }\n        scope.dataSigs = dataSigs;\n    };\n\n    // Check the current data against the data signature\n    sources = self.ctx.defaultSubscription.data;\n    if (scope.dataSigs.length === 0) {\n        captureSigs(sources);\n    } else {\n        changed = false;\n        for (let i = 0; i < scope.dataSigs.length; ++\n            i) {\n            sig = scope.dataSigs[i];\n            data = sources[i].data;\n            if (data.length != sig.length ||\n                data[0][0] != sig.head[0] ||\n                data[data.length - 1][0] != sig.tail[0]\n            ) {\n                changed = true;\n                break;\n            }\n        }\n        if (changed) {\n            scope.dataSigs = [];\n            captureSigs(sources);\n            document.dispatchEvent(scope.deviceActive);\n        }\n    }\n};\n\nself.onResize = function() {\n    self.ctx.flot.resize();\n};\n\nself.onEditModeChanged = function() {\n    self.ctx.flot.checkMouseEvents();\n};\n\nself.onMobileModeChanged = function() {\n    self.ctx.flot.checkMouseEvents();\n};\n\nself.getSettingsSchema = function() {\n    return TbFlot.settingsSchema('graph');\n};\n\nself.getDataKeySettingsSchema = function() {\n    return TbFlot.datakeySettingsSchema(true);\n};\n\nself.onDestroy = function() {\n    self.ctx.flot.destroy();\n};\n",
        "settingsSchema": "{}",
        "dataKeySettingsSchema": "{}",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"device_happiness\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Device Happiness\",\"color\":\"#2196f3\",\"settings\":{\"showLines\":true,\"fillLines\":true,\"showPoints\":false,\"axisPosition\":\"left\"},\"_hash\":0.8587686344902596,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"shadowSize\":4,\"fontColor\":\"#545454\",\"fontSize\":10,\"xaxis\":{\"showLabels\":true,\"color\":\"#545454\"},\"yaxis\":{\"showLabels\":true,\"color\":\"#545454\"},\"grid\":{\"color\":\"#545454\",\"tickColor\":\"#DDDDDD\",\"verticalLines\":true,\"horizontalLines\":true,\"outlineWidth\":1},\"stack\":false,\"tooltipIndividual\":false},\"title\":\"Dynamic Telemetry\",\"dropShadow\":true,\"enableFullscreen\":true,\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"mobileHeight\":null,\"widgetStyle\":{},\"useDashboardTimewindow\":true,\"displayTimewindow\":true,\"showLegend\":true,\"actions\":{}}"
      }
    },
    {
      "alias": "device_information",
      "name": "Device Information",
      "descriptor": {
        "type": "latest",
        "sizeX": 6.5,
        "sizeY": 4.5,
        "resources": [],
        "templateHtml": "<!--\nDevice Information widget HTML\n\n@copyright: Copyright 2019-2022 Intel Corporation All Rights Reserved.\n@license: Intel, see licenses/LICENSE for more details.\n-->\n\n<!DOCTYPE HTML>\n\n<div id=\"info-panel\" style=\"height: 100%;\">\n    <div class=\"device\"\n        ng-repeat=\"(k, p) in devices track by $index\">\n        <div class=\"device-header\">\n            <span class=\"device-name\">{{k}}</span>\n        </div>\n        <div class=\"device-property\"\n            ng-repeat=\"(k, v) in p\">\n            <div class=\"property-key\">{{k}}:</div>\n            <div class=\"property-value\">{{v}}</div>\n        </div>\n    </div>\n</div>",
        "templateCss": "/*\nDevice Information widget CSS\n\n@copyright: Copyright 2019-2022 Intel Corporation All Rights Reserved.\n@license: Intel, see licenses/LICENSE for more details.\n*/\n\n#info-panel {\n    overflow: auto;\n    margin: 0;\n}\n\n.device {\n    margin: 0 1rem 1rem 1rem;\n    display: flex;\n    flex-flow: column nowrap;\n}\n\n.device-header {\n    top: 0;\n    box-sizing: border-box;\n    position: -webkit-sticky;\n    position: sticky;\n    padding: 1rem 0;\n    background-color: #fff;\n}\n\n.device-name {\n    display: inline-block;\n    font-size: 1.25rem;\n    font-weight: 500;\n    margin-right: 1rem;\n}\n\n.device-status {\n    display: inline-block;\n    font-size: 0.9rem;\n    color: #666;\n}\n\n.device-property {\n    display: flex;\n    width: 100%;\n    margin: 0.25rem auto;\n    font-size: 0.9rem;\n}\n\n.property-key {\n    flex: 1;\n    flex-basis: 30%;\n    margin-right: 0.5rem;\n    word-wrap: break-word;\n}\n\n.property-value {\n    flex: 2;\n    flex-basis: 70%;\n    color: #666;\n    word-wrap: break-word;\n    word-break: break-all;\n}",
        "controllerScript": "/*\nDevice Information widget AngularJS controller code\n\n@copyright: Copyright 2019-2022 Intel Corporation All Rights Reserved.\n@license: Intel, see licenses/LICENSE for more details.\n*/\n\nself.onInit = function() {\n    \n    const scope = self.ctx.$scope;\n        scope.online = false;\n\n    // Initialize the devices object\n    scope.devices = {};\n    self.ctx.datasources.forEach(source => {\n        // Create the devices\n        props = {};\n        source.dataKeys.forEach(key => {\n            props[key.label] = \"\";\n        });\n        scope.devices[source.name] = props;\n    });\n};\n\nself.onDataUpdated = function() {\n\n    const scope = self.ctx.$scope;\n    const isNumber = n => !isNaN(parseFloat(n)) && isFinite(n);\n    \n    self.ctx.data.forEach(data => {\n        // Timestamp is left, prop is right\n        if (data.data.length === 0) return;\n        value = data.data[0][1];\n        \n        // Properly format numeric data\n        if (isNumber(value)) {\n            let decimals = self.ctx.decimals;\n            let units = self.ctx.units;\n            if (data.dataKey.decimals || data.dataKey.decimals === 0) {\n                decimals = data.dataKey.decimals;\n            }\n            if (data.dataKey.units) {\n                units = data.dataKey.units;\n            }\n            value = self.ctx.utils.formatValue(value, decimals, units, true);\n        }\n        \n        // Set the correct property\n        scope.devices[data.datasource.name][data.dataKey.label] = value;\n    });\n};\n\nself.onResize = function() {};\n\nself.onDestroy = function() {};\n",
        "settingsSchema": "{}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"My Device\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Happiness\",\"color\":\"#ff9800\",\"settings\":{},\"_hash\":0.26790778871949805,\"funcBody\":\"return Math.round(1000*Math.cos(time/5000));\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Temperature\",\"color\":\"rgb(33, 150, 243)\",\"settings\":{},\"_hash\":0.682878536509057,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":false,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"Device Information\",\"dropShadow\":true,\"enableFullscreen\":true,\"widgetStyle\":{},\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"useDashboardTimewindow\":true,\"displayTimewindow\":true,\"showLegend\":false,\"actions\":{}}"
      }
    },
    {
      "alias": "ota_form",
      "name": "OTA Form",
      "descriptor": {
        "type": "rpc",
        "sizeX": 4.5,
        "sizeY": 2,
        "resources": [],
        "templateHtml": "<!--\r\nThe OTA Form widget HTML\r\n\r\n@copyright: Copyright 2019-2022 Intel Corporation All Rights Reserved.\r\n@license: Intel, see licenses/LICENSE for more details.\r\n-->\r\n\r\n<!--OTA Card-->\r\n<fieldset id=\"ota-panel\"\r\n    ng-disabled=\"!rpcEnabled || executingRpcRequest\"\r\n    style=\"height: 100%;\">\r\n    <div id=\"ota-method-button-wrapper\">\r\n        <md-button id=\"ota-method-button\"\r\n            ng-click=\"displayDialog()\"\r\n            ng-class=\"{'md-raised': true, 'md-primary': true}\"\r\n            ng-disabled=\"batch && !devices.length\">\r\n            {{otaMethodLabel}}\r\n        </md-button>\r\n    </div>\r\n</fieldset>\r\n\r\n<!--OTA Dialogue-->\r\n<!--NOTE: Built-in CSS doesn't seem to apply to dialog contents\r\n          For the time being, using in-place style declarations-->\r\n<div style=\"visibility: hidden\">\r\n    <div class=\"md-dialog-container\" id=\"ota-dialog-{{otaMethod}}\">\r\n        <style>\r\n            #ota-dialog-label-wrapper {\r\n                display: flex;\r\n                width: 100%;\r\n                align-items: center;\r\n                justify-content: space-between;\r\n            }\r\n            #ota-dialog-label {\r\n                font-size: 1rem;\r\n            }\r\n            .md-dialog-content {\r\n                min-width: 20rem;\r\n            }\r\n            md-tabs-wrapper {\r\n                position: -webkit-sticky;\r\n                position: sticky;\r\n                top: 0;\r\n            }\r\n            #ota-inputs {\r\n                margin-bottom: 2rem;\r\n                display: flex;\r\n                flex-flow: column;\r\n                align-items: stretch;\r\n            }\r\n            #ota-select-wrapper {\r\n                margin: 0.75rem 0;\r\n            }\r\n            #ota-text-wrapper {\r\n                margin: 0.75rem 0;\r\n            }\r\n            .md-errors-spacer {\r\n                display: none;\r\n            }\r\n            #ota-button-wrapper {\r\n                display: flex;\r\n            }\r\n            #ota-button {\r\n                margin: 0;\r\n                background-color: rgb(33, 150, 243);\r\n            }\r\n            #ota-batch-toolbar {\r\n                display: flex;\r\n                width: 100%;\r\n                margin-bottom: 1rem;\r\n                align-items: center;\r\n                justify-content: space-between;\r\n            }\r\n            .ota-icon {\r\n                display: inline-flex;\r\n                justify-content: center;\r\n                align-items: center;\r\n                font-size: 1rem;\r\n            }\r\n            .success-icon {\r\n                color: green;\r\n            }\r\n            .failure-icon {\r\n                color: red;\r\n            }\r\n            .download-icon {\r\n                display: flex;\r\n            }\r\n            .inline {\r\n                display: inline-block;\r\n            }\r\n            .ota-response {\r\n                margin: 1rem 0;\r\n            }\r\n            .ota-message {\r\n                color: #aaa;\r\n                font-family: monospace;\r\n                font-size: 1rem;\r\n            }\r\n        </style>\r\n        <md-dialog>\r\n\r\n            <!--Title Bar-->\r\n            <md-toolbar>\r\n                <div class=\"md-toolbar-tools\">\r\n                    <div id=\"ota-dialog-label-wrapper\">\r\n                        <div id=\"ota-dialog-label\">\r\n                            {{otaMethodLabel}}\r\n                        </div>\r\n                        <md-button class=\"md-icon-button\"\r\n                            ng-click=\"closeDialog()\">\r\n                            &times;\r\n                        </md-button>\r\n                    </div>\r\n                    <md-progress-linear id=\"rpc-progress\"\r\n                        class=\"md-warn\"\r\n                        style=\"position: absolute; bottom: 0; left: 0;\"\r\n                        ng-show=\"executingRpcRequest\"\r\n                        md-mode=\"indeterminate\">\r\n                    </md-progress-linear>\r\n                </div>\r\n            </md-toolbar>\r\n\r\n            <!--Body-->\r\n            <md-dialog-content>\r\n                <md-tabs class=\"md-secondary\" layout=\"column\" md-selected=\"otaTab\"\r\n                    md-dynamic-height md-no-pagination md-border-bottom>\r\n                    <md-tab id=\"method-tab\">\r\n                        <md-tab-label>Method</md-tab-label>\r\n                        <md-tab-body>\r\n                            <div class=\"md-dialog-content\">\r\n                                <!--OTA Inputs-->\r\n                                <div id=\"ota-inputs\"\r\n                                    ng-show=\"otaSelectFields.length || otaTextFields.length\">\r\n\r\n                                    <!--Select-->\r\n                                    <md-input-container\r\n                                        class=\"ota-select-wrapper\"\r\n                                        ng-repeat=\"field in otaSelectFields track by $index\">\r\n                                        <label>{{field.label}}</label>\r\n                                        <md-select ng-model=\"field.data\"\r\n                                            ng-init=\"field.data = field.options[0]\">\r\n                                            <md-option ng-value=\"o\"\r\n                                                ng-repeat=\"o in field.options\">\r\n                                                {{ o.label }}\r\n                                            </md-option>\r\n                                        </md-select>\r\n                                    </md-input-container>\r\n\r\n                                    <!--Text-->\r\n                                    <!--NOTE: There's an additional .md-errors-spacer\r\n                                              that needs to be ignored-->\r\n                                    <md-input-container\r\n                                        class=\"ota-text-wrapper\"\r\n                                        ng-repeat=\"field in otaTextFields track by $index\">\r\n                                        <label>{{field.label}}</label>\r\n                                        <input type=\"text\"\r\n                                            ng-model=\"field.data\">\r\n                                    </md-input-container>\r\n                                </div>\r\n\r\n                                <!--Send Button-->\r\n                                <div id=\"ota-button-wrapper\"\r\n                                    ng-style=\"{justifyContent: alignButton}\">\r\n                                    <md-button id=\"ota-button\" ng-click=\"send()\"\r\n                                        ng-class=\"{'md-raised': true, 'md-primary': true}\">\r\n                                        SEND\r\n                                    </md-button>\r\n                                </div>\r\n                            </div>\r\n                        </md-tab-body>\r\n                    </md-tab>\r\n                    <md-tab id=\"result-tab\"\r\n                            ng-disabled=\"!otaResponse.length || executingRpcRequest\">\r\n                        <md-tab-label>Results</md-tab-label>\r\n                        <md-tab-body>\r\n                            <div class=\"md-dialog-content\">\r\n                                <!--Method Result Display-->\r\n                                <span id=\"ota-batch-toolbar\" ng-show=\"batch\">\r\n                                    <span>\r\n                                        <span ng-show=\"otaSuccess\" class=\"inline\">\r\n                                            <span class=\"inline\">{{otaSuccess}}</span>\r\n                                            <md-icon md-font-library=\"material-icons\"\r\n                                                class=\"ota-icon success-icon\">\r\n                                                check_circle\r\n                                            </md-icon>\r\n                                        </span>\r\n                                        <span ng-show=\"otaFailure\" class=\"inline\">\r\n                                            <span class=\"inline\">{{otaFailure}}</span>\r\n                                            <md-icon md-font-library=\"material-icons\"\r\n                                                class=\"ota-icon failure-icon\">\r\n                                                cancel\r\n                                            </md-icon>\r\n                                        </span>\r\n                                    </span>\r\n                                    <md-button class=\"md-icon-button\" ng-click=\"save()\">\r\n                                        <md-icon md-font-library=\"material-icons\">\r\n                                            get_app\r\n                                        </md-icon>\r\n                                    </md-button>\r\n                                </span>\r\n                                <div class=\"ota-response\"\r\n                                    ng-repeat=\"response in otaResponse track by $index\">\r\n                                    <div>\r\n                                        <md-icon md-font-library=\"material-icons\" class=\"ota-icon\"\r\n                                            ng-class=\"{'success-icon': response.success,\r\n                                                       'failure-icon': !response.success}\">\r\n                                            {{response.success ? 'check_circle' : 'cancel'}}\r\n                                        </md-icon>\r\n                                        <span class=\"inline\">{{response.name}}</span>\r\n                                    </div>\r\n                                    <div class=\"ota-message\">\r\n                                        {{response.message}}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </md-tab-body>\r\n                    </md-tab>\r\n                </md-tabs>\r\n            </md-dialog-content>\r\n        </md-dialog>\r\n    </div>\r\n</div>",
        "templateCss": "/*\r\nThe OTA Form widget CSS\r\n\r\n@copyright: Copyright 2019-2022 Intel Corporation All Rights Reserved.\r\n@license: Intel, see licenses/LICENSE for more details.\r\n*/\r\n\r\n#ota-method-button-wrapper {\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\n#ota-method-button {\r\n    background-color: rgb(33, 150, 243);\r\n    width: 80%;\r\n}",
        "controllerScript": "/*\r\nOTA Form widget AngularJS controller code\r\n\r\n@copyright: Copyright 2019-20222 Intel Corporation All Rights Reserved.\r\n@license: Intel, see licenses/LICENSE for more details.\r\n*/\r\n\r\nself.onInit = function() {\r\n\r\n    const scope = self.ctx.$scope;\r\n    const settings = self.ctx.settings;\r\n\r\n    // Callback to show the prerendered dialog\r\n    $mdDialog = scope.$injector.get(\"$mdDialog\");\r\n    scope.displayDialog = event => {\r\n        $mdDialog.show({\r\n            contentElement: '#ota-dialog-' + scope.otaMethod,\r\n            parent: angular.element(document.body),\r\n            targetEvent: event,\r\n            clickOutsideToClose: true\r\n        });\r\n    };\r\n\r\n    // Callback to hide the dialog\r\n    scope.closeDialog = () => {\r\n        $mdDialog.cancel();\r\n        scope.initOtaResponse();\r\n    };\r\n\r\n    // Set the method\r\n    scope.otaMethodLabel = settings.otaMethodLabel;\r\n    scope.otaMethod = settings.otaMethod;\r\n\r\n    // Set the method select fields\r\n    scope.otaSelectFields = [];\r\n    if (settings.otaSelectFields) {\r\n        settings.otaSelectFields.forEach(field => {\r\n            scope.otaSelectFields.push(field);\r\n        });\r\n    }\r\n\r\n    // Set the method text fields\r\n    scope.otaTextFields = [];\r\n    if (settings.otaTextFields) {\r\n        settings.otaTextFields.forEach(field => {\r\n            scope.otaTextFields.push(field);\r\n        });\r\n    }\r\n\r\n    // Center button if no fields are present\r\n    scope.alignButton =\r\n        (scope.otaSelectFields.length || scope.otaTextFields.length)\r\n        ? \"flex-end\" : \"center\";\r\n\r\n    // The device response data\r\n    scope.initOtaResponse = () => {\r\n        scope.otaTab = 1;\r\n        scope.otaSuccess = 0;\r\n        scope.otaFailure = 0;\r\n        scope.otaResponse = [];\r\n    };\r\n    scope.initOtaResponse();\r\n\r\n    scope.addOtaResponse = (success, name, message) => {\r\n        response = {\r\n            'success': success,\r\n            'name': name,\r\n            'message': message\r\n        };\r\n        (success) ? ++scope.otaSuccess : ++scope.otaFailure;\r\n        scope.otaResponse.push(response);\r\n    };\r\n\r\n    // Callback for send button\r\n    scope.batch = settings.batch;\r\n    scope.send = () => {\r\n        scope.initOtaResponse();\r\n        if (scope.batch) {\r\n            scope.sendFieldsBatch();\r\n        } else {\r\n            scope.sendFields();\r\n        }\r\n    };\r\n\r\n    // Simulate a batch RPC\r\n    scope.devices = [];\r\n    scope.sendFieldsBatch = () => {\r\n        scope.devices.forEach(device => {\r\n            self.ctx.defaultSubscription.targetDeviceId = device.id;\r\n            self.ctx.defaultSubscription.targetDeviceName = device.name;\r\n            scope.sendFields();\r\n        });\r\n    };\r\n\r\n    // Send the fields and inputs to device\r\n    scope.sendFields = () => {\r\n\r\n        // Populate the method arguments\r\n        const args = {};\r\n        scope.otaTextFields.forEach(field => {\r\n            if (field.data) args[field.key] = field.data;\r\n        });\r\n        scope.otaSelectFields.forEach(field => {\r\n            if (field.data) args[field.key] = field.data.key;\r\n        });\r\n\r\n        // Send the arguments\r\n        const timeout = settings.requestTimeout;\r\n        const name = self.ctx.defaultSubscription.targetDeviceName;\r\n        self.ctx.controlApi\r\n            .sendTwoWayCommand(\r\n                scope.otaMethod, args, timeout)\r\n            .then(\r\n                // Handle success\r\n                success => scope.addOtaResponse(\r\n                    true, name, angular.toJson(success)),\r\n                // Handle failure\r\n                failure => scope.addOtaResponse(\r\n                    false, name, `\"${failure.status}`\r\n                    + ` ${failure.statusText} `\r\n                    + `${scope.rpcErrorText}\"`)\r\n            )\r\n            .finally(() => {\r\n                const totalOta = scope.otaSuccess + scope.otaFailure;\r\n                if (totalOta >= scope.devices.length) { // Include non-batch case\r\n                    scope.otaResponse.sort((a, b) => {\r\n                        if (a.success && !b.success) {\r\n                            return -1;\r\n                        } else if (!a.success && b.success) {\r\n                            return 1;\r\n                        } else if (a.name < b.name) {\r\n                            return -1;\r\n                        } else if (a.name > b.name) {\r\n                            return 1;\r\n                        }\r\n                        return 0;\r\n                    });\r\n                    scope.otaTab = 2;\r\n                }\r\n            });\r\n    };\r\n\r\n    // Save data as a .csv file\r\n    // Adapted from https://stackoverflow.com/a/30832210\r\n    scope.save = () => {\r\n        // Create .CSV filename\r\n        const cmd = scope.otaMethodLabel\r\n            .toLocaleLowerCase()\r\n            .replace(\" \", \"-\");\r\n        const date = new Date();\r\n        const d = date.getDate();\r\n        const m = date.getMonth() + 1;\r\n        const y = date.getFullYear();\r\n        filename = `${cmd}_${y}-${m}-${d}.csv`;\r\n        \r\n        // Create .CSV file\r\n        data = \"Send Status,Device Name,Message\\r\\n\";\r\n        scope.otaResponse.forEach(r => {\r\n            data += `${r.success},${r.name},${r.message}\\r\\n`;\r\n        });\r\n        \r\n        type = \"text/plain\";\r\n        const file = new Blob([data], {type: type});\r\n        if (window.navigator.msSaveOrOpenBlob)\r\n            window.navigator.msSaveOrOpenBlob(file, filename); // IE10+\r\n        else {\r\n            const a = document.createElement(\"a\"),\r\n                    url = URL.createObjectURL(file);\r\n            a.href = url;\r\n            a.download = filename;\r\n            document.body.appendChild(a);\r\n            a.click();\r\n            setTimeout(function() {\r\n                document.body.removeChild(a);\r\n                window.URL.revokeObjectURL(url);\r\n            }, 0);\r\n        }\r\n    };\r\n\r\n    // Listen to the globally broadcasted device selection event\r\n    scope.updateList = e => scope.devices = e.detail;\r\n    document.addEventListener(\"deviceSelected\", scope.updateList);\r\n\r\n    // Run any resizing code\r\n    self.onResize();\r\n};\r\n\r\nself.onResize = function() {};\r\n\r\nself.onDestroy = function() {\r\n    document.removeEventListener(\"deviceActive\", self.ctx.$scope.updateList);\r\n};",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"properties\": {\n            \"batch\": {\n                \"title\": \"Batch RPC\",\n                \"type\": \"boolean\",\n                \"default\": false\n            },\n            \"otaMethodLabel\": {\n                \"title\": \"OTA Method Label\",\n                \"type\": \"string\",\n                \"default\": \"Sample Method\"\n            },\n            \"otaMethod\": {\n                \"title\": \"OTA Method Key\",\n                \"type\": \"string\",\n                \"default\": \"sample_method\"\n            },\n            \"otaSelectFields\": {\n                \"title\": \"Select Box Fields\",\n                \"type\": \"array\",\n                \"minItems\": 0,\n                \"items\": {\n                    \"title\": \"Select Box\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"label\": {\n                            \"title\": \"Label\",\n                            \"type\": \"string\"\n                        },\n                        \"key\": {\n                            \"title\": \"Key\",\n                            \"type\": \"string\"\n                        },\n                        \"options\": {\n                            \"title\": \"Options\",\n                            \"type\": \"array\",\n                            \"minItems\": 1,\n                            \"items\": {\n                                \"title\": \"Option\",\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"label\": {\n                                        \"title\": \"Label\",\n                                        \"type\": \"string\"\n                                    },\n                                    \"key\": {\n                                        \"title\": \"Key\",\n                                        \"type\": \"string\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            \"otaTextFields\": {\n                \"title\": \"Text Box Fields\",\n                \"type\": \"array\",\n                \"minItems\": 0,\n                \"items\": {\n                    \"title\": \"Text Box\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"label\": {\n                            \"title\": \"Label\",\n                            \"type\": \"string\"\n                        },\n                        \"key\": {\n                            \"title\": \"Key\",\n                            \"type\": \"string\"\n                        }\n                    }\n                }\n            },\n            \"requestTimeout\": {\n                \"title\": \"RPC request timeout\",\n                \"type\": \"number\",\n                \"default\": 500\n            }\n        }\n    }\n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"targetDeviceAliases\":[],\"showTitle\":false,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"0px\",\"settings\":{\"requestTimeout\":500,\"otaTextFields\":[{\"label\":\"Sample Text\",\"key\":\"sample_text\"},{\"label\":\"Sample Text 2\",\"key\":\"sample_text_2\"}],\"otaSelectFields\":[{\"label\":\"Sample Select\",\"key\":\"sample_select\",\"options\":[{\"label\":\"Option 1\",\"key\":\"1\"},{\"label\":\"Option 2\",\"key\":\"2\"},{\"label\":\"Option 3\",\"key\":\"3\"}],\"data\":{\"label\":\"Option 1\",\"key\":\"1\"}},{\"label\":\"Sample Select 2\",\"key\":\"sample_select_2\",\"options\":[{\"label\":\"Option 1\",\"key\":\"1\"},{\"label\":\"Option 2\",\"key\":\"2\"},{\"label\":\"Option 3\",\"key\":\"3\"}],\"data\":{\"label\":\"Option 1\",\"key\":\"1\"}}],\"otaMethod\":\"sample_form_method\",\"otaMethodLabel\":\"Sample Form Method\"},\"title\":\"OTA Form\",\"dropShadow\":true,\"enableFullscreen\":false,\"widgetStyle\":{},\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"useDashboardTimewindow\":true,\"displayTimewindow\":true,\"showLegend\":false,\"actions\":{}}"
      }
    },
    {
      "alias": "connectivity_status",
      "name": "Connectivity Status",
      "descriptor": {
        "type": "rpc",
        "sizeX": 6,
        "sizeY": 1.5,
        "resources": [],
        "templateHtml": "<!--\nConnectivity Status widget HTML\n\n@copyright: Copyright 2019-2022 Intel Corporation All Rights Reserved.\n@license: Intel, see licenses/LICENSE for more details.\n-->\n\n<!DOCTYPE HTML>\n\n<!--OTA Card-->\n<fieldset id=\"status-panel\"\n    ng-disabled=\"!rpcEnabled || executingRpcRequest\"\n    style=\"height: 100%;\">\n    <md-progress-circular\n        ng-show=\"executingRpcRequest\"\n        md-diameter=\"20px\"\n        style=\"position: absolute;\n            right: 1rem;\n            top: calc(50% - 10px);\">\n    </md-progress-circular>\n    <div class=\"status\" ng-class=\"connection\"\n        ng-click=\"ping()\">\n        <span class=\"text\">\n            Status:\n            {{ connection ? \"Online\" : \"Offline\" }}\n        </span>\n    </div>\n</fieldset>",
        "templateCss": "/*\nConnectivity Status widget CSS\n\n@copyright: Copyright 2019-2022 Intel Corporation All Rights Reserved.\n@license: Intel, see licenses/LICENSE for more details.\n*/\n\n.status {\n    display: flex;\n    align-items: center;\n    width: 100%;\n    height: 100%;\n    background-color: gray;\n    color: white;\n}\n\n.alive {\n    background-color: green;\n}\n\n.text {\n    display: inline-block;\n    margin: 1rem;\n    height: 1rem;\n    font-size: 1rem;\n    font-weight: bold;\n}\n\nmd-progress-circular svg path {\n    stroke: white;\n}",
        "controllerScript": "/*\nConnectivity Status widget AngularJS controller code\n\n@copyright: Copyright 2019-2022 Intel Corporation All Rights Reserved.\n@license: Intel, see licenses/LICENSE for more details.\n*/\n\nself.onInit = function() {\n\n    const scope = self.ctx.$scope;\n    const settings = self.ctx.settings;\n\n    // Initialization\n    scope.connection = \"\";\n    scope.pulse = 60000 * settings.pulse;\n\n    // Callback to send the fields and inputs to device\n    scope.ping = () => {\n\n        // Send the arguments\n        promise = self.ctx.controlApi\n            .sendTwoWayCommand(\"ping\", {}, 500);\n        promise.then(\n            success => scope.connection =\n            \"alive\",\n            failure => scope.connection = \"\"\n        );\n        return promise;\n\n    };\n    \n    // Defer the check in ping to avoid spam\n    scope.deferred_ping = 0;\n    scope.defer_ping = () => {\n        clearTimeout(scope.deferred_ping);\n        scope.deferred_ping = setTimeout(scope.ping, 5000);\n    };\n\n    // Recursive pulse ping\n    scope.pulse_ping = () => setTimeout(() => {\n        scope.defer_ping();\n        scope.pulse_ping();\n    }, scope.pulse);\n\n    // Listen to the globally broadcasted connectivity event\n    document.addEventListener(\"deviceActive\", scope\n        .defer_ping);\n        \n    // Send an RPC on behalf of a widget that can't\n    scope.sendRpc = rpcEvent => {\n        if (rpcEvent.detail !== null) {\n            command = rpcEvent.detail.command;\n            payload = rpcEvent.detail.payload;\n            self.ctx.controlApi\n                .sendTwoWayCommand(command, payload, 500)\n                .then(\n                    success => document.dispatchEvent(\n                        new CustomEvent(\n                            'rpcAck', { detail: true }\n                        )\n                    ),\n                    failure => document.dispatchEvent(\n                        new CustomEvent(\n                            'rpcAck', { detail: false }\n                        )\n                    )\n                )\n        }\n    };\n        \n    // Listen for globally broadcasted RPC request events\n    document.addEventListener(\"rpcRequest\", scope.sendRpc);\n\n    scope.ping();\n    scope.pulse_ping();\n};\n\nself.onDestroy = function() {\n    document.removeEventListener(\"deviceActive\",\n        self.ctx.$scope.ping);\n};",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"properties\": {\n            \"pulse\": {\n                \"title\": \"Pulse (minutes)\",\n                \"type\": \"number\",\n                \"default\": 5\n            }\n        }\n    }\n}",
        "dataKeySettingsSchema": "{}",
        "defaultConfig": "{\"showTitle\":false,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"0\",\"settings\":{\"pulse\":10},\"title\":\"Connectivity Status\",\"dropShadow\":true,\"enableFullscreen\":false,\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"mobileHeight\":null,\"targetDeviceAliases\":[],\"widgetStyle\":{},\"useDashboardTimewindow\":true,\"displayTimewindow\":true,\"showLegend\":false,\"actions\":{}}"
      }
    }
  ]
}
